"use client";
import {
  Ripple
} from "./chunk-K24D2276.js";
import {
  ComponentBase,
  DomHandler,
  IconUtils,
  ObjectUtils,
  PrimeReactContext,
  UniqueComponentId,
  classNames,
  useHandleStyle,
  useMergeProps,
  useMountEffect
} from "./chunk-DBGKPHSK.js";
import {
  require_react
} from "./chunk-GMHSYVPX.js";
import {
  __toESM
} from "./chunk-UV5CTPV7.js";

// node_modules/primereact/tabmenu/tabmenu.esm.js
var React = __toESM(require_react());
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t)
          return;
        f = false;
      } else
        for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
          ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
          return;
      } finally {
        if (o)
          throw n;
      }
    }
    return a;
  }
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
var classes = {
  icon: function icon(_ref) {
    var _icon = _ref._icon;
    return classNames("p-menuitem-icon", _icon);
  },
  label: "p-menuitem-text",
  action: "p-menuitem-link",
  menuitem: function menuitem(_ref2) {
    var _className = _ref2._className, active = _ref2.active, disabled = _ref2.disabled;
    return classNames("p-tabmenuitem", {
      "p-highlight": active,
      "p-disabled": disabled
    }, _className);
  },
  inkbar: "p-tabmenu-ink-bar",
  menu: "p-tabmenu-nav p-reset",
  root: "p-tabmenu p-component"
};
var styles = "\n@layer primereact {\n    .p-tabmenu {\n        overflow-x: auto;\n    }\n\n    .p-tabmenu-nav {\n        display: flex;\n        margin: 0;\n        padding: 0;\n        list-style-type: none;\n        flex-wrap: nowrap;\n    }\n\n    .p-tabmenu-nav a {\n        cursor: pointer;\n        user-select: none;\n        display: flex;\n        align-items: center;\n        position: relative;\n        text-decoration: none;\n        text-decoration: none;\n        overflow: hidden;\n    }\n\n    .p-tabmenu-nav a:focus {\n        z-index: 1;\n    }\n\n    .p-tabmenu-nav .p-menuitem-text {\n        line-height: 1;\n    }\n\n    .p-tabmenu-ink-bar {\n        display: none;\n        z-index: 1;\n    }\n\n    .p-tabmenu::-webkit-scrollbar {\n        display: none;\n    }\n}\n";
var TabMenuBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "TabMenu",
    id: null,
    model: null,
    activeIndex: 0,
    ariaLabel: null,
    ariaLabelledBy: null,
    style: null,
    className: null,
    onTabChange: null,
    children: void 0
  },
  css: {
    classes,
    styles
  }
});
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var TabMenu = React.memo(React.forwardRef(function(inProps, ref) {
  var mergeProps = useMergeProps();
  var context = React.useContext(PrimeReactContext);
  var props = TabMenuBase.getProps(inProps, context);
  var _React$useState = React.useState(props.id), _React$useState2 = _slicedToArray(_React$useState, 2), idState = _React$useState2[0], setIdState = _React$useState2[1];
  var _React$useState3 = React.useState(props.activeIndex), _React$useState4 = _slicedToArray(_React$useState3, 2), activeIndexState = _React$useState4[0], setActiveIndexState = _React$useState4[1];
  var elementRef = React.useRef(null);
  var inkbarRef = React.useRef(null);
  var navRef = React.useRef(null);
  var tabsRef = React.useRef({});
  var activeIndex = props.onTabChange ? props.activeIndex : activeIndexState;
  var metaData = {
    props,
    state: {
      id: idState,
      activeIndex
    }
  };
  var _TabMenuBase$setMetaD = TabMenuBase.setMetaData(_objectSpread({}, metaData)), ptm = _TabMenuBase$setMetaD.ptm, cx = _TabMenuBase$setMetaD.cx, isUnstyled = _TabMenuBase$setMetaD.isUnstyled;
  var getPTOptions = function getPTOptions2(key, item, index) {
    return ptm(key, {
      parent: metaData,
      context: {
        item,
        index
      }
    });
  };
  useHandleStyle(TabMenuBase.css.styles, isUnstyled, {
    name: "tabmenu"
  });
  var itemClick = function itemClick2(event, item, index) {
    if (item.disabled) {
      event.preventDefault();
      return;
    }
    if (item.command) {
      item.command({
        originalEvent: event,
        item
      });
    }
    if (props.onTabChange) {
      props.onTabChange({
        originalEvent: event,
        value: item,
        index
      });
    } else {
      setActiveIndexState(index);
    }
    if (!item.url) {
      event.preventDefault();
      event.stopPropagation();
    }
  };
  var isSelected = function isSelected2(index) {
    return index === (activeIndex || 0);
  };
  var updateInkBar = function updateInkBar2() {
    if (props.model) {
      var tabs = navRef.current.children;
      var inkHighlighted = false;
      for (var i = 0; i < tabs.length; i++) {
        var tab = tabs[i];
        if (DomHandler.getAttribute(tab, "data-p-highlight")) {
          inkbarRef.current.style.width = DomHandler.getWidth(tab) + "px";
          inkbarRef.current.style.left = DomHandler.getOffset(tab).left - DomHandler.getOffset(navRef.current).left + "px";
          inkHighlighted = true;
        }
      }
      if (!inkHighlighted) {
        inkbarRef.current.style.width = "0px";
        inkbarRef.current.style.left = "0px";
      }
    }
  };
  useMountEffect(function() {
    if (!idState) {
      setIdState(UniqueComponentId());
    }
  });
  React.useImperativeHandle(ref, function() {
    return {
      props,
      getElement: function getElement() {
        return elementRef.current;
      }
    };
  });
  React.useEffect(function() {
    updateInkBar();
  });
  var onKeyDownItem = function onKeyDownItem2(event, item, index) {
    switch (event.code) {
      case "ArrowRight":
        navigateToNextItem(event.target);
        event.preventDefault();
        break;
      case "ArrowLeft":
        navigateToPrevItem(event.target);
        event.preventDefault();
        break;
      case "Home":
        navigateToFirstItem(event.target);
        event.preventDefault();
        break;
      case "End":
        navigateToLastItem(event.target);
        event.preventDefault();
        break;
      case "Space":
      case "Enter":
      case "NumpadEnter":
        itemClick(event, item, index);
        event.preventDefault();
        break;
      case "Tab":
        onTabKey();
        break;
    }
  };
  var navigateToNextItem = function navigateToNextItem2(target) {
    var nextItem = findNextItem(target);
    nextItem && setFocusToMenuitem(target, nextItem);
  };
  var navigateToPrevItem = function navigateToPrevItem2(target) {
    var prevItem = findPrevItem(target);
    prevItem && setFocusToMenuitem(target, prevItem);
  };
  var navigateToFirstItem = function navigateToFirstItem2(target) {
    var firstItem = findFirstItem();
    firstItem && setFocusToMenuitem(target, firstItem);
  };
  var navigateToLastItem = function navigateToLastItem2(target) {
    var lastItem = findLastItem();
    lastItem && setFocusToMenuitem(target, lastItem);
  };
  var findNextItem = function findNextItem2(item) {
    var nextItem = item.parentElement.nextElementSibling;
    return nextItem ? DomHandler.getAttribute(nextItem, "data-p-disabled") === true ? findNextItem2(nextItem.children[0]) : nextItem.children[0] : null;
  };
  var findPrevItem = function findPrevItem2(item) {
    var prevItem = item.parentElement.previousElementSibling;
    return prevItem ? DomHandler.getAttribute(prevItem, "data-p-disabled") === true ? findPrevItem2(prevItem.children[0]) : prevItem.children[0] : null;
  };
  var findFirstItem = function findFirstItem2() {
    var firstSibling = DomHandler.findSingle(navRef.current, '[data-pc-section="menuitem"][data-p-disabled="false"]');
    return firstSibling ? firstSibling.children[0] : null;
  };
  var findLastItem = function findLastItem2() {
    var siblings = DomHandler.find(navRef.current, '[data-pc-section="menuitem"][data-p-disabled="false"]');
    return siblings ? siblings[siblings.length - 1].children[0] : null;
  };
  var setFocusToMenuitem = function setFocusToMenuitem2(target, focusableItem) {
    target.tabIndex = "-1";
    focusableItem.tabIndex = "0";
    focusableItem.focus();
  };
  var onTabKey = function onTabKey2() {
    var activeItem = DomHandler.findSingle(navRef.current, '[data-pc-section="menuitem"][data-p-disabled="false"][data-p-highlight="true"]');
    var focusedItem = DomHandler.findSingle(navRef.current, '[data-pc-section="action"][tabindex="0"]');
    if (focusedItem !== activeItem.children[0]) {
      activeItem && (activeItem.children[0].tabIndex = "0");
      focusedItem.tabIndex = "-1";
    }
  };
  var createMenuItem = function createMenuItem2(item, index) {
    if (item.visible === false) {
      return null;
    }
    var _className = item.className, style = item.style, disabled = item.disabled, _icon = item.icon, _label = item.label, template = item.template, url = item.url, target = item.target;
    var key = item.id || idState + "_" + index;
    var active = isSelected(index);
    var iconClassName = classNames("p-menuitem-icon", _icon);
    var iconProps = mergeProps({
      className: cx("icon", {
        _icon
      })
    }, getPTOptions("icon", item, index));
    var icon2 = IconUtils.getJSXIcon(_icon, _objectSpread({}, iconProps), {
      props
    });
    var labelProps = mergeProps({
      className: cx("label")
    }, getPTOptions("label", item, index));
    var label = _label && React.createElement("span", labelProps, _label);
    var actionProps = mergeProps({
      href: url || "#",
      role: "menuitem",
      "aria-label": _label,
      tabIndex: active ? "0" : "-1",
      className: cx("action"),
      target,
      onClick: function onClick(event) {
        return itemClick(event, item, index);
      }
    }, getPTOptions("action", item, index));
    var content = React.createElement("a", actionProps, icon2, label, React.createElement(Ripple, null));
    if (template) {
      var defaultContentOptions = {
        onClick: function onClick(event) {
          return itemClick(event, item, index);
        },
        className: "p-menuitem-link",
        labelClassName: "p-menuitem-text",
        iconClassName,
        element: content,
        props,
        active,
        index,
        disabled
      };
      content = ObjectUtils.getJSXElement(template, item, defaultContentOptions);
    }
    var menuItemProps = mergeProps({
      ref: tabsRef.current["tab_".concat(index)],
      id: key,
      key,
      onKeyDown: function onKeyDown(event) {
        return onKeyDownItem(event, item, index);
      },
      className: cx("menuitem", {
        _className,
        active,
        disabled
      }),
      style,
      role: "presentation",
      "data-p-highlight": active,
      "data-p-disabled": disabled || false,
      "aria-disabled": disabled
    }, getPTOptions("menuitem", item, index));
    return React.createElement("li", menuItemProps, content);
  };
  var createItems = function createItems2() {
    return props.model.map(createMenuItem);
  };
  if (props.model) {
    var items = createItems();
    var inkbarProps = mergeProps({
      ref: inkbarRef,
      role: "none",
      className: cx("inkbar")
    }, ptm("inkbar"));
    var menuProps = mergeProps({
      ref: navRef,
      "aria-label": props.ariaLabel,
      "aria-labelledby": props.ariaLabelledBy,
      className: cx("menu"),
      role: "menubar"
    }, ptm("menu"));
    var rootProps = mergeProps({
      id: props.id,
      ref: elementRef,
      className: classNames(props.className, cx("root")),
      style: props.style
    }, TabMenuBase.getOtherProps(props), ptm("root"));
    return React.createElement("div", rootProps, React.createElement("ul", menuProps, items, React.createElement("li", inkbarProps)));
  }
  return null;
}));
TabMenu.displayName = "TabMenu";
export {
  TabMenu
};
//# sourceMappingURL=primereact_tabmenu.js.map
